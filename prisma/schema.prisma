// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
// The data acquired from different providers when logging in
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// For users stored locally after logged in. We often check if the user is logged in by checking if the session exists
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User data model
model User {
  id             String    @id @default(cuid())
  name           String
  preferredName  String?
  email          String   @unique
  contactemail   String?
  emailVerified  DateTime?
  image  String?

  graduationClass Int?
  tagLine         String?
  major           String?
  bio             String?
  spaces          Space[] @default([])

  approved       Boolean   @default(false)

  accounts Account[]
  sessions Session[]
  role     Role?      @default(STUDENT)
  Alumni   Alumni?    @relation(fields: [alumniId], references: [id])
  alumniId String?
}

model Alumni {
  id String @id @default(cuid())

  mentor   Boolean
  location String
  job      String

  userId String @unique
  User   User[]
}

enum Role {
  ADMIN
  ALUMNI
  STUDENT
}

enum Space {
  DESIGN
  DEVELOPMENT
  MARKETING
  PRODUCT
  PROJECT_MANAGEMENT
  STRATEGY
}