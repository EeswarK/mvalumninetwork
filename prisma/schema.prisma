// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

// Necessary for Next auth
// The data acquired from different providers when logging in
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// For user current logged in session.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User data model
model User {
  id            String  @id @default(cuid())
  firstName     String?
  lastName      String?
  preferredName String?
  contactEmail  String?
  image         String? // ! Should store in S3

  graduationClass Int?
  majors          String? // ! This is a string for now, but should be an array
  bio             String?

  approved Approved?
  role     Role?

  Education  Education[] // Will have MV, along with any other education
  Experience Experience[]

  // Mentorship
  openToMentoring Boolean?

  // Search Query

  // Required fields for Next-auth
  name          String
  email         String   @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Education {
  id String @id @default(cuid())

  schoolName      String
  degree          String
  majors          String
  minor           String?
  graduationClass Int

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id String @id @default(cuid())

  companyName String
  jobTitle    String
  startDate   DateTime
  endDate     DateTime?
  description String

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Approved {
  WAITING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  ALUMNI
  STUDENT
}
